// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/widgets/add_expense_form_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:expense_tracker/src/domain/usecases/expense/add_expense_usecase.dart'
    as _i2;
import 'package:expense_tracker/src/domain/usecases/expense/get_supported_currencies_usecase.dart'
    as _i3;
import 'package:expense_tracker/src/presentation/screens/add_expense/controller/cubit.dart'
    as _i5;
import 'package:expense_tracker/src/presentation/screens/add_expense/controller/state.dart'
    as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAddExpenseUseCase_0 extends _i1.SmartFake
    implements _i2.AddExpenseUseCase {
  _FakeAddExpenseUseCase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeGetSupportedCurrenciesUseCase_1 extends _i1.SmartFake
    implements _i3.GetSupportedCurrenciesUseCase {
  _FakeGetSupportedCurrenciesUseCase_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeAddExpenseState_2 extends _i1.SmartFake
    implements _i4.AddExpenseState {
  _FakeAddExpenseState_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AddExpenseCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddExpenseCubit extends _i1.Mock implements _i5.AddExpenseCubit {
  MockAddExpenseCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AddExpenseUseCase get addExpenseUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#addExpenseUseCase),
            returnValue: _FakeAddExpenseUseCase_0(
              this,
              Invocation.getter(#addExpenseUseCase),
            ),
          )
          as _i2.AddExpenseUseCase);

  @override
  _i3.GetSupportedCurrenciesUseCase get getSupportedCurrenciesUseCase =>
      (super.noSuchMethod(
            Invocation.getter(#getSupportedCurrenciesUseCase),
            returnValue: _FakeGetSupportedCurrenciesUseCase_1(
              this,
              Invocation.getter(#getSupportedCurrenciesUseCase),
            ),
          )
          as _i3.GetSupportedCurrenciesUseCase);

  @override
  _i4.AddExpenseState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeAddExpenseState_2(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i4.AddExpenseState);

  @override
  _i6.Stream<_i4.AddExpenseState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i6.Stream<_i4.AddExpenseState>.empty(),
          )
          as _i6.Stream<_i4.AddExpenseState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);

  @override
  _i6.Future<void> loadSupportedCurrencies() =>
      (super.noSuchMethod(
            Invocation.method(#loadSupportedCurrencies, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<double> convertCurrency({
    required double? amount,
    required String? fromCurrency,
    required String? toCurrency,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#convertCurrency, [], {
              #amount: amount,
              #fromCurrency: fromCurrency,
              #toCurrency: toCurrency,
            }),
            returnValue: _i6.Future<double>.value(0.0),
          )
          as _i6.Future<double>);

  @override
  _i6.Future<void> addExpense({
    required String? category,
    required double? amount,
    required String? currency,
    required DateTime? date,
    String? description,
    String? receiptPath,
    required String? categoryIcon,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [], {
              #category: category,
              #amount: amount,
              #currency: currency,
              #date: date,
              #description: description,
              #receiptPath: receiptPath,
              #categoryIcon: categoryIcon,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void resetState() => super.noSuchMethod(
    Invocation.method(#resetState, []),
    returnValueForMissingStub: null,
  );

  @override
  void emit(_i4.AddExpenseState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i7.Change<_i4.AddExpenseState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}
