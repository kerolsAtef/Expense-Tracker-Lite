// Mocks generated by Mockito 5.4.6 from annotations
// in expense_tracker/test/unit/pagination_logic_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:expense_tracker/src/core/error/failures.dart' as _i5;
import 'package:expense_tracker/src/domain/entities/expense.dart' as _i6;
import 'package:expense_tracker/src/domain/entities/expense_filter.dart' as _i7;
import 'package:expense_tracker/src/domain/entities/expense_summary.dart'
    as _i8;
import 'package:expense_tracker/src/domain/repositories/expense_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ExpenseRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockExpenseRepository extends _i1.Mock implements _i3.ExpenseRepository {
  MockExpenseRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Expense>> addExpense({
    required String? category,
    required double? amount,
    required String? currency,
    required DateTime? date,
    String? description,
    String? receiptPath,
    required String? categoryIcon,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addExpense, [], {
              #category: category,
              #amount: amount,
              #currency: currency,
              #date: date,
              #description: description,
              #receiptPath: receiptPath,
              #categoryIcon: categoryIcon,
            }),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Expense>>.value(
              _FakeEither_0<_i5.Failure, _i6.Expense>(
                this,
                Invocation.method(#addExpense, [], {
                  #category: category,
                  #amount: amount,
                  #currency: currency,
                  #date: date,
                  #description: description,
                  #receiptPath: receiptPath,
                  #categoryIcon: categoryIcon,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Expense>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Expense>>> getExpenses({
    _i7.ExpenseFilter? filter,
    int? page = 1,
    int? limit = 10,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenses, [], {
              #filter: filter,
              #page: page,
              #limit: limit,
            }),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, List<_i6.Expense>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.Expense>>(
                    this,
                    Invocation.method(#getExpenses, [], {
                      #filter: filter,
                      #page: page,
                      #limit: limit,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Expense>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Expense>> updateExpense(
    _i6.Expense? expense,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateExpense, [expense]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Expense>>.value(
              _FakeEither_0<_i5.Failure, _i6.Expense>(
                this,
                Invocation.method(#updateExpense, [expense]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Expense>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteExpense(String? expenseId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteExpense, [expenseId]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteExpense, [expenseId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i8.ExpenseSummary>> getExpenseSummary({
    _i7.ExpenseFilter? filter,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getExpenseSummary, [], {#filter: filter}),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i8.ExpenseSummary>>.value(
                  _FakeEither_0<_i5.Failure, _i8.ExpenseSummary>(
                    this,
                    Invocation.method(#getExpenseSummary, [], {
                      #filter: filter,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, _i8.ExpenseSummary>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, int>> getTotalExpenseCount({
    _i7.ExpenseFilter? filter,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getTotalExpenseCount, [], {#filter: filter}),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, int>>.value(
              _FakeEither_0<_i5.Failure, int>(
                this,
                Invocation.method(#getTotalExpenseCount, [], {#filter: filter}),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, int>>);
}
